//Arduino
#include <OneWire.h>
#include <DallasTemperature.h>
#include <LiquidCrystal.h>
#define ONE_WIRE_BUS 2
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>
#include <Servo.h>

unsigned long startTime = 0;
unsigned long 
desiredtime=72000000; 
int ledpin=7;

LiquidCrystal_I2C lcd(0x27,16,2);
OneWire oneWire(ONE_WIRE_BUS);	// Pass oneWire reference to DallasTemperature library
DallasTemperature dallasTemperature(&oneWire);

 
namespace pin {
const byte tds_sensor = A1;
 // Dallas Temperature Sensor
}
 
namespace device {
float aref = 4.3;
}
 
namespace sensor {
float ec = 0;
unsigned int tds = 0;
float waterTemp = 0;
float ecCalibration = 1;
}

const int analogInPin = A0; 
int sensorValue = 0; 
unsigned long int avgValue; 
float b;
int buf[10],temp=0; 

//servo
#include <Servo.h>

Servo myservo;  // create servo object to control a servo
// twelve servo objects can be created on most boards

int pos = 0;    // variable to store the servo position
 
void setup() {
  //myservo.attach(9);
  Serial.begin(115200);
  lcd.init();
  lcd.backlight(); // Dubugging on hardware Serial 0
  dallasTemperature.begin();
  pinMode (7,OUTPUT);
  myservo.attach(9);  // attaches the servo on pin 9 to the servo object

}
 
 
void loop() {
  startTime = millis();

  if (startTime <= desiredtime) {
    digitalWrite(7, HIGH);
    startTime = millis();
    readTdsQuick();
    delay(1000);
    ph_sensor();
    //digitalWrite(7,HIGH);


  }
  startTime= startTime-desiredtime-3;
  servo();

 
}
 
void readTdsQuick() {
  dallasTemperature.requestTemperatures();
  sensor::waterTemp = dallasTemperature.getTempCByIndex(0);
  float rawEc = analogRead(pin::tds_sensor) * device::aref / 1024.0; // read the analog value more stable by the median filtering algorithm, and convert to voltage value
  float temperatureCoefficient = 1.0 + 0.02 * (sensor::waterTemp - 25.0); // temperature compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0));
  sensor::ec = (rawEc / temperatureCoefficient) * sensor::ecCalibration; // temperature and calibration compensation
  sensor::tds = (133.42 * pow(sensor::ec, 3) - 255.86 * sensor::ec * sensor::ec + 857.39 * sensor::ec) * 0.5; //convert voltage value to tds value
  Serial.print(F("TDS:")); Serial.println(sensor::tds);
  Serial.print(F("EC:")); Serial.println(sensor::ec, 2);
  Serial.print(F("Temperature:")); Serial.println(sensor::waterTemp,2);
  lcd.clear();
  lcd.print("TDS   EC   Temp");
  lcd.setCursor(0,1); 
  lcd.print(sensor::tds); 
  lcd.setCursor(5,1); 
  lcd.print(sensor::ec, 2); 
  lcd.setCursor(11,1); 
  lcd.print(sensor::waterTemp,2); 
  
}

void ph_sensor() 
{
 for(int i=0;i<10;i++) 
 { 
  buf[i]=analogRead(analogInPin);
  delay(10);
 }
 for(int i=0;i<9;i++)
 {
  for(int j=i+1;j<10;j++)
  {
   if(buf[i]>buf[j])
   {
    temp=buf[i];
    buf[i]=buf[j];
    buf[j]=temp;
   }
  }
 }
 avgValue=0;
 for(int i=2;i<8;i++)
 avgValue+=buf[i];
 
 float pHVol=(float)avgValue*5.0/1024/4.3;
 float phValue = -5.70 * pHVol + 22.8;
 phValue=14.2-phValue;
 //float phValue = -3.0 * pHVol+17.5;
 Serial.print("sensor = ");
 Serial.println(phValue);
 lcd.clear();
 lcd.setCursor(0,0);  
 lcd.print("pH Value");
 lcd.setCursor(3,1);  
 lcd.print(phValue);
 
}


   
  
void servo(){
  for (pos = 0; pos <= 60; pos += 1) { // goes from 0 degrees to 180 degrees
    // in steps of 1 degree
    myservo.write(pos);              // tell servo to go to position in variable 'pos'
    delay(15);                       // waits 15ms for the servo to reach the position
  }
  for (pos = 60; pos >= 0; pos -= 1) { // goes from 180 degrees to 0 degrees
    myservo.write(pos);              // tell servo to go to position in variable 'pos'
    delay(15);                       // waits 15ms for the servo to reach the position
  }
}
  
//ESP32
#define BLYNK_TEMPLATE_ID "TMPLcuNME_cN"
#define BLYNK_TEMPLATE_NAME "ESP32"
#define BLYNK_AUTH_TOKEN "DnGqYKTXzNvDvjYNQB4XaWO2d3P-2lIa"
#define BLYNK_PRINT Serial
#define USE_ESP32_DEV_MODULE
#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>
char auth[] = "DnGqYKTXzNvDvjYNQB4XaWO2d3P-2lIa";
char ssid[] = "HONOR 20";
char pass[]= "12345678";


#include <OneWire.h>
#include <DallasTemperature.h>
#define ONE_WIRE_BUS 15
#define echoPin 12
#define trigPin 13
#include "Adafruit_Sensor.h"
#include <DHT.h>
#include <DHT_U.h>
#define DHTTYPE    DHT11     // DHT 11
#define DHTPIN 14
DHT_Unified dht(DHTPIN, DHTTYPE);
uint32_t delayMS; 

long duration;
int distance; 
BlynkTimer timer;

OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);

void setup() {
  Serial.begin(115200); // Dubugging on hardware Serial 0
  sensors.begin();
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  dht.begin();
  sensor_t sensor;
  delayMS = sensor.min_delay / 1000;
  
  timer.setInterval(1000L, sendsensor1);
  timer.setInterval(1000L, sendsensor2);  

  Blynk.begin(auth, ssid, pass, "blynk.cloud", 80);
}
 
 
void loop() 
{
  ultrasonic();
  delay(1000);
  timer.run();
}
 
void ultrasonic()
{
    digitalWrite(trigPin, LOW);
    delayMicroseconds(2);
    digitalWrite(trigPin, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPin, LOW);
    duration = pulseIn(echoPin, HIGH);
    distance = duration * 0.034 / 2; //formula to calculate the distance for ultrasonic sensor
    Serial.print("Distance: ");
    Serial.println(distance);
    Blynk.virtualWrite(V1, distance);
    delay(500);
}

void sendsensor1()
{
  sensors.requestTemperatures(); 
  Serial.print("Celsius temperature: ");
  //We can connect more than one IC on the same data wire. 0 refers to the first IC on the wire
  Serial.print(sensors.getTempCByIndex(0)); 
  Serial.print(" - Fahrenheit temperature: ");
  Serial.println(sensors.getTempFByIndex(0));
  int tempC=sensors.getTempCByIndex(0);
  int tempF=sensors.getTempFByIndex(0);
  Blynk.virtualWrite(V2, tempC);  
  delay(500);
}

void sendsensor2()
{
  sensors_event_t event;
  dht.temperature().getEvent(&event);
  Serial.print(F("Temperature: "));
  int t=event.temperature;
  Serial.print(event.temperature);
  Serial.println(F("Â°C"));
  dht.humidity().getEvent(&event);
  Serial.print(F("Humidity: "));
  int h=event.relative_humidity;
  Serial.print(event.relative_humidity);
  Serial.println(F("%"));
  delay(delayMS);
  Blynk.virtualWrite(V3, h);
  Blynk.virtualWrite(V4, t);
}







